// state space (value of variable "s")

//  0  1  2  3  4
//  5     6     7
//  8     9    10

// (state,observation) in the maze
//  (0,1)  (1,2)  (2,3)  (3,2)  (4,4)
//  (5,5)         (6,5)         (7,5)
//  (8,6)         (9,7)         (10,6)

// 9 is the target
// 8 and 10 are the bad states

pomdp

// can observe the walls and target
observables
	o
endobservables
// o=0 - observation in initial state
// o=1 - west and north walls (s0)
// o=2 - north and south ways (s1 and s3)
// o=3 - north wall (s2)
// o=4 - east and north way (s4)
// o=5 - east and west walls (s5, s6, s7)
// o=6 - east, west and south walls (s8 and s10)
// o=7 - the target (s9)

// observable "o" = o;
module maze

	s : [-1..10] init -1;
	o : [0..7];
	
	// initialisation
	[INIT] s=-1 -> 1/8 : (s'=0) & (o'=1)
			 + 1/8 : (s'=1) & (o'=2)
			 + 1/8 : (s'=2) & (o'=3)
			 + 1/8 : (s'=3) & (o'=2)
			 + 1/8 : (s'=4) & (o'=4)
			 + 1/8 : (s'=5) & (o'=5)
			 + 1/8 : (s'=6) & (o'=5)
			 + 1/8 : (s'=7) & (o'=5);
	
	// moving around the maze
	
	[east] s=0 -> (s'=1) & (o'=2);
	[west] s=0 -> (s'=0);
	[north] s=0 -> (s'=0);
	[south] s=0 -> (s'=5) & (o'=5);

	[east] s=1 -> (s'=2) & (o'=3);
	[west] s=1 -> (s'=0) & (o'=1);
	[north] s=1 -> (s'=1);
	[south] s=1 -> (s'=1);

	[east] s=2 -> (s'=3) & (o'=2);
	[west] s=2 -> (s'=1) & (o'=2);
	[north] s=2 -> (s'=2);
	[south] s=2 -> (s'=6) & (o'=5);

	[east] s=3 -> (s'=4) & (o'=4);
	[west] s=3 -> (s'=2) & (o'=3);
	[north] s=3 -> (s'=3);
	[south] s=3 -> (s'=3);

	[east] s=4 -> (s'=4);
	[west] s=4 -> (s'=3) & (o'=2);
	[north] s=4 -> (s'=4);
	[south] s=4 -> (s'=7) & (o'=5);

	[east] s=5 -> (s'=5);
	[west] s=5 -> (s'=5);
	[north] s=5 -> (s'=0) & (o'=1);
	[south] s=5 -> (s'=8) & (o'=6);

	[east] s=6 -> (s'=6);
	[west] s=6 -> (s'=6);
	[north] s=6 -> (s'=2) & (o'=3);
	[south] s=6 -> (s'=9) & (o'=7);

	[east] s=7 -> (s'=7);
	[west] s=7 -> (s'=7);
	[north] s=7 -> (s'=4) & (o'=4);
	[south] s=7 -> (s'=10) & (o'=6);

	// loop when we reach the sink (a target or a bad state)
	[done] s=8 -> true;
	[done] s=9 -> true;
	[done] s=10 -> true;

endmodule


// target observation
label "goal" = o=7;

// bad state observation
label "bad" = o=6;

